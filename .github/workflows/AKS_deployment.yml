# Beschreibung des Workflows
name: Create Azure AKS with Terraform

# Ermöglicht den Workflow über das GitHub-Interface zu starten.
on:
  workflow_dispatch:

# Berechtigungen für den Workflow.
permissions:
  id-token: write
  contents: read

# Startet die Definition der Jobs im Workflow.
jobs:
# Name des Jobs, welcher auf Ubuntu läuft und das environment AKS_Testing wird festgelegt, wo die ensprechenden Secrets hier in GitHub hinterlegt sind.
  AKS-Cluster-Deployment:
    runs-on: ubuntu-latest
    environment: AKS_Testing
    defaults:
      run:
        shell: bash
        # Verzeichnis AKS wird festgelegt.
        working-directory: AKS

    steps:
    # GitHub Actions checkout@v3.1.0 wird verwendet.
      - name: Checkout repository
        uses: actions/checkout@v3.1.0

      - name: 'az CLI login'
      # Authentifiziert sich bei Azure mit den angegebenen Anmeldeinformationen. Siehe auch die Environment secrets hier in den GitHub Settings.
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
          audience: api://AzureADTokenExchange
          auth-type: SERVICE_PRINCIPAL

# Terraform Befehle werden ausgeführt.
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output

# Work in progress. Automatisierung Task 2.
#      - name: Sleep for resources to be ready
#       run: sleep 120
#        
#      - name: Configure kubectl
#        run: |
#          az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw kubernetes_cluster_name)
#          kubectl config use-context $(terraform output -raw kubernetes_cluster_name)
#        
#      - name: Configure kubectl
#        run: |
#          kubectl apply -f configmap.yaml
#          kubectl apply -f deployment.yaml
#          kubectl apply -f service.yaml
#          kubectl get nodes
